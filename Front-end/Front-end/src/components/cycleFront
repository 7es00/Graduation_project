import React from "react";
import { useUser } from "./UserContext"; // Import useUser hook from UserContext
import styles from "../styles/home/style.module.css";

import '../styles/home/hero.css'


const HeroSection = () => {
  const { user } = useUser(); // Access the user object from the context

  const userId = user.userId;
  // Extract the user ID from the user object

  const sliderData = [
    "resources collector",
    "common programs",
    "Assistant chatbot",
    "free certifications",
  ];

  const logout = () => {
    localStorage.clear();
    window.location.reload();
  };

  return (
    <section className={styles.heroSection} id="heroSection">

      <nav className={`${styles.navbar} bg-body-tertiary fixed-top`}>
        <div className="container-fluid">
          <div
            className={`${styles.navbarLogoContainer} ${styles.logo} ${styles.absolute}`}
          >
            <a href="#heroSection">
              <img
                className={styles.logoImage}
                src="/logo.png"
                alt=""
              />
            </a>
          </div>
          <div>
            <ul className={`navbar-nav ${styles.links} ${styles.absolute} ${styles.flexCenter} justify-content-around`} >
              <li className="nav-item">
                <a
                  className="nav-link active"
                  aria-current="page"
                  href="#heroSection"
                >
                  <i className="ri-home-8-line"></i>
                </a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#stacks">
                  <i className="ri-stack-overflow-line"></i>
                </a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#knowledge">
                  <i className="ri-newspaper-line"></i>
                </a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#buddy">
                  <i className="bx bxs-face-mask"></i>
                </a>
              </li>
              <li className="nav-item">
                {!localStorage.getItem("loggedin") ? (
                  <a className="nav-link" href="#form">
                    <i className="ri-login-circle-line"></i>
                  </a>
                ) : (
                  <a onClick={logout} className="nav-link" href="#">
                    <i className="ri-logout-circle-line"></i>
                  </a>
                )}
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#contact">
                  <i className="ri-message-2-line"></i>
                </a>
              </li>
            </ul>
          </div>
          <div
            className={`${styles.mods} ${styles.flexCenter} ${styles.absolute}`}
          >
            <i className="ri-contrast-2-line"></i>
          </div>
        </div>
      </nav>

      <main>
        <div className={`${styles.left} ${styles.flexCenter}`} >
          <div className={styles.leftContent}>
          <div className="text">
            
            <span>
                <h1><span className="borderedText">Hello</span> <span className="coloredText ms-3">There</span></h1>
            </span>
            
            <h3>
              <span className="coloredText">Buddy</span> <span className="borderedText">Is Here</span>
            </h3>

            <p> I am here to provide to you a clear and organized path for learning, <br /> Save time and effort instead of random research and experimentation.</p>
            <div class="media-box">
              <div className="main">
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/349359/facebook?edit=true">
                        <svg className="facebook" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30px" height="30px">
                            <path d="M20.31 2H3.69C2.64 2 2 2.64 2 3.69v16.62C2 21.36 2.64 22 3.69 22h8.12v-7.84H9.67v-3.06h2.14V9.88c0-2.11 1.29-3.26 3.17-3.26.91 0 1.69.07 1.92.1v2.2h-1.32c-1.03 0-1.23.49-1.23 1.21v1.59h2.45l-.32 3.06h-2.13V22h4.18c1.05 0 1.69-.66 1.69-1.69V3.69C22 2.64 21.36 2 20.31 2z" />
                        </svg>
                    </a>
                </div>
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/349359/facebook?edit=true">
                        <svg className="instagram" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" width="30px" height="30px">
                            <path d="M11.46875,5c-3.55078,0 -6.46875,2.91406 -6.46875,6.46875v9.0625c0,3.55078 2.91406,6.46875 6.46875,6.46875h9.0625c3.55078,0 6.46875,-2.91406 6.46875,-6.46875v-9.0625c0,-3.55078 -2.91406,-6.46875 -6.46875,-6.46875zM11.46875,7h9.0625c2.47266,0 4.46875,1.99609 4.46875,4.46875v9.0625c0,2.47266 -1.99609,4.46875 -4.46875,4.46875h-9.0625c-2.47266,0 -4.46875,-1.99609 -4.46875,-4.46875v-9.0625c0,-2.47266 1.99609,-4.46875 4.46875,-4.46875zM21.90625,9.1875c-0.50391,0 -0.90625,0.40234 -0.90625,0.90625c0,0.50391 0.40234,0.90625 0.90625,0.90625c0.50391,0 0.90625,-0.40234 0.90625,-0.90625c0,-0.50391 -0.40234,-0.90625 -0.90625,-0.90625zM16,10c-3.30078,0 -6,2.69922 -6,6c0,3.30078 2.69922,6 6,6c3.30078,0 6,-2.69922 6,-6c0,-3.30078 -2.69922,-6 -6,-6zM16,12c2.22266,0 4,1.77734 4,4c0,2.22266 -1.77734,4 -4,4c-2.22266,0 -4,-1.77734 -4,-4c0,-2.22266 1.77734,-4 4,-4z" />
                        </svg>
                    </a>
                </div>
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/349359/facebook?edit=true">
                        <svg className="twitter" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="30px" height="30px">
                            <path d="M42,12.429c-1.323,0.586-2.746,0.977-4.247,1.162c1.526-0.906,2.7-2.351,3.251-4.058c-1.428,0.837-3.01,1.452-4.693,1.776C34.967,9.884,33.05,9,30.926,9c-4.08,0-7.387,3.278-7.387,7.32c0,0.572,0.067,1.129,0.193,1.67c-6.138-0.308-11.582-3.226-15.224-7.654c-0.64,1.082-1,2.349-1,3.686c0,2.541,1.301,4.778,3.285,6.096c-1.211-0.037-2.351-0.374-3.349-0.914c0,0.022,0,0.055,0,0.086c0,3.551,2.547,6.508,5.923,7.181c-0.617,0.169-1.269,0.263-1.941,0.263c-0.477,0-0.942-0.054-1.392-0.135c0.94,2.902,3.667,5.023,6.898,5.086c-2.528,1.96-5.712,3.134-9.174,3.134c-0.598,0-1.183-0.034-1.761-0.104C9.268,36.786,13.152,38,17.321,38c13.585,0,21.017-11.156,21.017-20.834c0-0.317-0.01-0.633-0.025-0.945C39.763,15.197,41.013,13.905,42,12.429" />
                        </svg>
                    </a>
                </div>
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/349359/facebook?edit=true">
                        <svg className="dribble" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="30px" height="30px" fill="#000000">
                            <path d="M17,0C8.7,0,2,6.7,2,15c0,3.4,1.1,6.6,3.2,9.2l-2.1,6.4c-0.1,0.4,0,0.8,0.3,1.1C3.5,31.9,3.8,32,4,32c0.1,0,0.3,0,0.4-0.1l6.9-3.1C13.1,29.6,15,30,17,30c8.3,0,15-6.7,15-15S25.3,0,17,0z" />
                            <path className="st0" d="M25.7,20.5c-0.4,1.2-1.9,2.2-3.2,2.4C22.2,23,21.9,23,21.5,23c-0.8,0-2-0.2-4.1-1.1c-2.4-1-4.8-3.1-6.7-5.8L10.7,16C10.1,15.1,9,13.4,9,11.6c0-2.2,1.1-3.3,1.5-3.8c0.5-0.5,1.2-0.8,2-0.8c0.2,0,0.3,0,0.5,0c0.7,0,1.2,0.2,1.7,0.5c0.1,0.1,0.2,0.1,0.3,0.2c0.4,0.5,1,1.2,1.5,2.2c0.4,0.8,0.8,1.9,1.4,3.1c0.2,0.5,0.4,1,0.7,1.5c0.1,0.1,0.1,0.2,0.2,0.3c0.5,1.4,1,2.7,1.7,3.7c0.6,0.9,1.3,1.5,2.3,2.1c0.3,0.2,0.7,0.3,1.1,0.4c0.4,0.1,0.7,0.1,1,0.1c1.1,0,1.9-0.4,2.3-1.1c0.1-0.1,0.1-0.2,0.1-0.3C26.1,21.3,26,20.9,25.7,20.5z" />
                        </svg>
                    </a>
                </div>
                <div className="card">
                  <a href="https://www.svgrepo.com/svg/349359/facebook?edit=true">
                      <svg className="linkedin" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" width="30px" height="30px">
                          <rect width="256" height="256" fill="#0077B5" />
                          <path fill="#FFF" d="M40 68h32v128h-32zM80 96c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM212 68h-56c-4.418 0-8 3.582-8 8v104c0 4.418 3.582 8 8 8h56c4.418 0 8-3.582 8-8v-104c0-4.418-3.582-8-8-8zM148 148h-24v-52h24v52zM136 88c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8z" />
                      </svg>
                  </a>
                </div>
                <div className="card">
                  <a href="https://www.svgrepo.com/svg/220636/github">
                      <svg className="github" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30px" height="30px">
                          <path d="M12 0C5.373 0 0 5.373 0 12c0 5.302 3.438 9.8 8.207 11.387.6.11.82-.26.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.387-1.332-1.756-1.332-1.756-1.09-.744.083-.73.083-.73 1.205.085 1.838 1.24 1.838 1.24 1.07 1.83 2.808 1.302 3.49.997.108-.773.42-1.302.765-1.602-2.676-.305-5.487-1.338-5.487-5.94 0-1.312.465-2.383 1.235-3.228-.135-.304-.54-1.526.105-3.178 0 0 1.008-.324 3.3 1.23A11.572 11.572 0 0 1 12 5.36c1.026.003 2.07.138 3.048.403 2.29-1.556 3.296-1.23 3.296-1.23.645 1.652.24 2.874.12 3.178.765.846 1.23 1.916 1.23 3.228 0 4.614-2.816 5.63-5.496 5.928.432.373.81 1.105.81 2.228 0 1.61-.015 2.907-.015 3.292 0 .32.21.694.825.574C20.566 21.793 24 17.295 24 12c0-6.627-5.373-12-12-12z"/>
                      </svg>
                  </a>
                </div>

              {/* YouTube */}
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/222504/youtube">
                        <svg className="youtube" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30px" height="30px">
                            <path d="M23.625 6.266c-.265-1.011-1.051-1.797-2.062-2.062C19.273 4 12 4 12 4s-7.273 0-9.563.203c-1.011.265-1.797 1.051-2.062 2.062C.047 8.797 0 12 0 12s.047 3.203.375 5.734c.265 1.011 1.051 1.797 2.062 2.062C4.727 20 12 20 12 20s7.273 0 9.563-.203c1.011-.265 1.797-1.051 2.062-2.062C23.953 15.203 24 12 24 12s-.047-3.203-.375-5.734zM9.5 15.75V8.25l6.5 3.75-6.5 3.75z"/>
                        </svg>
                    </a>
                </div>

                {/* Pinterest */}
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/220588/pinterest">
                        <svg className="pinterest" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30px" height="30px">
                            <path d="M11.953 0C6.39 0 3.16 4.407 3.16 6.907c0 1.16.442 2.188 1.397 2.576.165.068.31 0 .356-.18.034-.138.114-.485.15-.635.05-.224.034-.303-.12-.512-.34-.412-.558-.94-.558-1.604 0-1.787 1.301-3.234 3.747-3.234 1.947 0 3.184 1.166 3.184 3.027 0 1.89-1.1 6.83-1.1 6.83s.257.533.336.69c.05.133.034.228-.076.357-.22.26-.683.855-.94 1.18-.692.854-1.276 1.885-1.276 3.028 0 3.387 2.064 5.913 5.99 5.913 3.558 0 6.132-2.445 6.132-5.905 0-3.94-2.303-7.065-5.634-7.065-1.86 0-3.106 1.254-2.684 3.08.514 2.264 1.218 4.693 1.218 6.307 0 1.16-.21 2.27-.365 3.31-.104.803-.636 1.567-1.24 1.96-.22.113-.234.166-.36-.046-.09-.168-.57-1.066-.763-1.438-.195-.368-.348-.32-.834-.196-3.122 1.166-4.03-2.427-4.03-4.478 0-2.558 2.336-5.225 6.145-5.225 3.316 0 5.856 2.376 5.856 5.527 0 3.227-2.048 5.865-4.85 5.865-1.086 0-2.064-.564-2.403-1.352l-.645 2.42c-.237.886-.885 1.992-1.317 2.676-.156.245-.25.32-.52.242-.21-.063-1.455-.59-2.182-.887-.08-.037-.133-.086-.153-.183-.08-.34.055-1.01.076-1.127.034-.21.138-.262.35-.166.965.444 1.315-.594 1.536-1.002.474-.805.82-1.825.947-2.878.122-1.14.66-7.48.66-7.48.107-.554-.228-1.087-.775-1.087-.973 0-1.73 1.073-1.73 2.5 0 .936.315 1.573.315 1.573s-1.327 5.651-1.563 6.663c-.364 1.418-.054 3.157-.027 3.334.013.1.14.127.188.047.08-.134.858-1.174 1.085-1.547.15-.262.274-.573.366-.89.203-.707.965-4.367 1.103-4.93.198-.797.366-1.66.366-2.513 0-4.1-2.312-7.21-6.766-7.21z"/>
                        </svg>
                    </a>
                </div>

                {/* Reddit */}
                <div className="card">
                    <a href="https://www.svgrepo.com/svg/220773/reddit">
                        <svg className="reddit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30px" height="30px">
                            <path d="M24 12c0 6.628-5.372 12-12 12-6.627 0-12-5.372-12-12 0-6.627 5.373-12 12-12 6.628 0 12 5.373 12 12zm-4.485-5.65c0-.736-.598-1.334-1.334-1.334-.737 0-1.335.598-1.335 1.334 0 .736.598 1.334 1.335 1.334.736 0 1.334-.598 1.334-1.334zm-6.834 7.926c-.056.134-.143.247-.25.334-.107.087-.239.145-.385.166-.082.01-.166.014-.25.014-1.057 0-1.915-.879-1.915-1.959s.858-1.958 1.915-1.958c.565 0 1.053.307 1.334.764 1.266-.938 2.868-1.515 4.616-1.627-.084-.298-.126-.607-.126-.924 0-2.481 2.018-4.5 4.5-4.5s4.5 2.019 4.5 4.5-2.019 4.5-4.5 4.5c-.062 0-.122-.009-.182-.012-.013 0-.026.003-.038 0-.003 0-.005-.003-.008-.003-.269.058-.541.082-.819.082-1.604 0-3.1-1.06-3.621-2.656zm6.561-5.828c-.56 0-1.053-.307-1.334-.764-1.266.938-2.868 1.515-4.616 1.627.084.298.126.607.126.924 0 2.481-2.018 4.5-4.5 4.5s-4.5-2.019-4.5-4.5 2.019-4.5 4.5-4.5c.062 0 .122.009.182.012.013 0 .026-.003.038 0 .003 0 .005.003.008.003.269-.058.541-.082.819-.082 1.604 0 3.1 1.06 3.621 2.656.056.134.143.247.25.334.107.087.239.145.385.166.082.01.166.014.25.014 1.057 0 1.915-.879 1.915-1.959s-.858-1.958-1.915-1.958z"/>
                        </svg>
                    </a>
                </div>
              </div>
            </div>

            <div className="mouse" id="mouse">
                <svg width="60px" height="60px" viewBox="0 0 1024.00 1024.00" className="icon" version="1.1" xmlns="http://www.w3.org/2000/svg" stroke="#000000" strokeWidth="0.01024">
                    <g id="SVGRepo_bgCarrier" strokeWidth="0"></g>
                    <g id="SVGRepo_tracerCarrier" strokeLinecap="round" strokeLinejoin="round" stroke="#CCCCCC" strokeWidth="2.048"></g>
                    <g id="SVGRepo_iconCarrier">
                        <path d="M760.32 504.32l-496.64 0.512v188.928c0 115.712 94.208 209.92 209.92 209.92h76.8c115.712 0 209.92-94.208 209.92-209.92v-189.44z m15.36 189.44c0 124.416-100.864 225.28-225.28 225.28h-76.8c-124.416 0-225.28-100.864-225.28-225.28V489.472l527.36-0.512v204.8z" fill=""></path>
                        <path d="M491.52 291.84h40.96c14.336 0 25.6 11.264 25.6 25.6v51.2c0 14.336-11.264 25.6-25.6 25.6h-40.96c-14.336 0-25.6-11.264-25.6-25.6V317.44c0-14.336 11.264-25.6 25.6-25.6z" fill="#0088f0"></path>
                        <path d="M488.96 192v76.8H465.92c-9.728 0-17.92 8.192-17.92 17.92v112.64c0 9.728 8.192 17.92 17.92 17.92h23.04v53.248h-240.64V417.28c0-124.416 100.864-225.28 225.28-225.28h15.36z m-225.28 225.28v37.888h209.92v-22.528H465.92c-18.432 0-33.28-14.848-33.28-33.28V286.72c0-18.432 14.848-33.28 33.28-33.28h7.68v-46.08c-115.712 0-209.92 94.208-209.92 209.92z m286.72-163.84h7.68c18.432 0 33.28 14.848 33.28 33.28v112.64c0 18.432-14.848 33.28-33.28 33.28h-7.68v22.528h209.92v-37.888c0-115.712-94.208-209.92-209.92-209.92v46.08z m0-61.44c124.416 0 225.28 100.864 225.28 225.28v53.248h-240.64V417.28h23.04c9.728 0 17.92-8.192 17.92-17.92V286.72c0-9.728-8.192-17.92-17.92-17.92h-23.04v-76.8h15.36z" fill=""></path>
                        <path d="M491.52 299.52c-9.728 0-17.92 8.192-17.92 17.92v51.2c0 9.728 8.192 17.92 17.92 17.92h40.96c9.728 0 17.92-8.192 17.92-17.92V317.44c0-9.728-8.192-17.92-17.92-17.92h-40.96z m0-15.36h40.96c18.432 0 33.28 14.848 33.28 33.28v51.2c0 18.432-14.848 33.28-33.28 33.28h-40.96c-18.432 0-33.28-14.848-33.28-33.28V317.44c0-18.432 14.848-33.28 33.28-33.28z" fill=""></path>
                        <path d="M391.68 79.36c0 24.064 9.728 42.496 28.672 54.272 7.68 4.608 15.36 7.68 24.576 10.24 5.12 1.536 8.192 2.048 17.92 3.584 13.312 2.56 18.432 4.096 22.528 7.168 12.288 9.216 16.384 19.968 13.824 34.816-1.536 8.192 4.096 16.384 12.8 17.92 8.192 1.536 16.384-4.096 17.92-12.8 4.096-26.112-4.608-48.128-25.6-64.512-9.216-7.168-17.92-9.728-35.84-12.8-8.704-1.536-11.264-2.048-15.36-3.072-6.656-1.536-11.776-3.584-15.872-6.656-9.216-5.632-13.824-14.848-13.824-28.672 0-8.704-7.168-15.36-15.36-15.36-9.728 0.512-16.384 7.68-16.384 15.872z" fill="#0088f0"></path>
                    </g>
                </svg>

            </div>

        </div>

          </div>
        </div>
        <div className={styles.right}>
          <div
            className={`${styles.layout} ${styles.flexCenter} ${styles.absolute}`}
          >
            {sliderData.map((item) => (
              <div className={`${styles.services} ${styles.flexCenter}`}>
                <i className="ri-money-dollar-circle-line"></i>
                <h3>{item}</h3>
              </div>
            ))}
            <div className={styles.circle}></div>
          </div>
          <div className={`${styles.overlay} ${styles.absolute}`}></div>
        </div>
      </main>
      
    </section>
  );
};

export default HeroSection;




// stacks

import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";

import styles from "../styles/home/style.module.css";
import '../styles/home/stacks.css'

const apiUrl = process.env.REACT_APP_API_URL;

const StacksSection = ({ stacks }) => {
  const [firstLevelCategories, setFirstLevelCategories] = useState([]);

  // fetch data from api 
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(`${apiUrl}/stacks`);
        if (response.ok) {
          const data = await response.json();
          setFirstLevelCategories(data);
          console.log(data);
        } else {
          console.error("Failed to fetch data");
        }
      } catch (error) {
        console.error("Error:", error);
      }
    };
    fetchData();
  }, []);

  return (
    firstLevelCategories && firstLevelCategories.map((firstLevelCategory, index) => (
      <section id={styles.heading}>
        <div className={styles.stacks} id="stacks">
          <div className={styles.heading}>
            <div className={styles.stacksHeading}>{firstLevelCategory.name}</div>
            <div className={styles.stacksDetails}>{firstLevelCategory.description}</div>
          </div>
          <div className={styles.stacksContent}>
            {firstLevelCategory && firstLevelCategory.categories &&
              firstLevelCategory.categories.map((category, index) => (
                <div className={styles.tracks} key={index}>
                  <div className={styles.stackName}>
                    <i className={category.logo}></i> {category.name}
                  </div>
                  <div className={styles.trackContent}>
                    {category.stacks &&
                      category.stacks.map((stack, idx) => (
                        <div className={styles.track} key={idx}>
                          <div className={styles.trackIcon}>
                            <img  src={stack.logo}  alt=""   style={{ width: '60px', height: '60px' }} />
                          </div>
                          <div className={styles.trackName}>
                            <Link to={`/stacks/${stack.id}`}>{stack.name}</Link>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              ))}
          </div>
        </div>
      </section>
    ))
  );
};

export default StacksSection;



// copntat\

<section id="contact" className={styles.contact}>
<div className={styles.heading}>send your feedback <span>!</span></div>
{/* api send data */}
<form action="https://formsubmit.co/roadx2024@gmail.com" method='POST' className={styles.contactForm}>
    <input type="text" className={styles.contactInput} placeholder="please enter your name" />
    <input type="email" className={styles.contactInput} placeholder="please enter your email" />
    <input type="number" className={styles.contactInput} placeholder="please enter your phone" />
    <input type="text" className={styles.contactInput} placeholder="please enter your subject" />
    <textarea className={styles.contactTextArea} name="" id="" placeholder="please enter your message"></textarea>
    <input type="submit" value="send message" className={`${styles.submit} ${masterStyles.submit}`} />
</form>
</section>

//  contact
            // Buddy
            import React, { useState, useEffect } from "react";
import axios from "axios";
import styles from "../styles/home/style.module.css";

function BuddySection() {
    const [showChatForm, setShowChatForm] = useState(false);
    const [buddyInputFocused, setBuddyInputFocused] = useState(false);
    const [chatMessage, setChatMessage] = useState(""); // State to store the chat message
    const [chatHistory, setChatHistory] = useState([]); // State to store chat history

    useEffect(() => {
        // Fetch initial chat messages or any other initialization logic here
    }, []);

    const handleChatInputClick = () => {
        setShowChatForm(true);
        setBuddyInputFocused(true);
    };

    const handleBuddyInputBlur = () => {
        setBuddyInputFocused(false);
    };

    async function handleSendMessage() {
        try {
            const response = await axios.get(
                `https://roadxml-23f6660bd654.herokuapp.com/get`,
                {
                    params: {
                        msg: chatMessage, // Send the encoded message as a parameter
                    },
                }
            );

            console.log("API Response:", response.data); // Log API response

            // Update chat history with user's message and bot's response
            const updatedChatHistory = [
                ...chatHistory,
                { text: chatMessage, sender: "user" },
                { text: response.data.msg, sender: "bot" },
            ];

            setChatHistory(updatedChatHistory);
            setChatMessage(""); // Clear the input after sending message
        } catch (error) {
            // Handle API error
            console.error("Error sending message:", error);
        }
    }

    return (
        <section
            id="buddySection"
            className={`${styles.buddy} ${
                showChatForm ? styles.showChatForm : ""
            }`}
        >
            <div
                className={`${styles.buddyContainer} ${
                    showChatForm ? styles.buddyContainerUp : ""
                }`}
            >
                <div className={styles.buddyLogo}>
                    <i className="bx bxs-face-mask"></i>
                </div>
                <div className={styles.details}>
                    <h1>Hi, I am Buddy</h1>
                    <p>Welcome! I am here to help you.</p>
                </div>
                <div className={styles.chatBtn}>
                    <button
                        className={`${
                            showChatForm
                                ? styles.removeChatInput
                                : styles.chatInput
                        }`}
                        onClick={handleChatInputClick}
                    >
                        Chat with me
                    </button>
                </div>
            </div>
            {showChatForm && (
                <div className={styles.chatContainer}>
                    <div className={styles.chatHistory}>
                        {chatHistory.map((msg, index) => (
                            <div
                                key={index}
                                className={`${styles.chatMessage} ${
                                    msg.sender === "user"
                                        ? styles.userMessage
                                        : styles.botMessage
                                }`}
                                style={{
                                    alignSelf:
                                        msg.sender === "user"
                                            ? "flex-end"
                                            : "flex-start",
                                }}
                            >
                                {msg.text}
                            </div>
                        ))}
                    </div>
                    <form
                        className={`${styles.form} ${styles.chatForm} ${
                            showChatForm ? styles.chatFormAppear : ""
                        }`}
                        onSubmit={(e) => {
                            e.preventDefault();
                            handleSendMessage();
                        }}
                    >
                        <div className="input">
                            <input
                                type="text"
                                placeholder="Enter your message..."
                                id="buddyInput"
                                onBlur={handleBuddyInputBlur}
                                autoFocus={buddyInputFocused}
                                value={chatMessage}
                                onChange={(e) => setChatMessage(e.target.value)}
                            />
                            <button type="submit" className={styles.sendButton}>
                                Send
                            </button>
                        </div>
                    </form>
                </div>
            )}
        </section>
    );
}

export default BuddySection;

            // buddyy

            // sign in
            import React, { useState } from 'react';
import { useUser } from './UserContext'; // Import useUser hook from UserContext

const apiUrl = process.env.REACT_APP_API_URL;

const SignIn = () => {
    const { loginUser } = useUser();
    const [showPassword, setShowPassword] = useState(false);

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const [loginFormData, setLoginFormData] = useState({
        email: '',
        password: ''
    });

    const handleChangeLog = (e) => {
        const { name, value } = e.target;
        setLoginFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const logHandleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch(`${apiUrl}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(loginFormData)
            });
            const data = await response.json();
            if (response.ok) {
                console.log('Login successful', data);
                loginUser(data.user.id, data.token);  // Use loginUser from context
                window.location.reload();
                alert('Login successful');

            } else {
                console.error('Login failed', data.message);
                alert('Login failed: ' + data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Login error: ' + error.message);
        }
    };

    return (
      <>
          <form onSubmit={logHandleSubmit}>
              <h1 className="sign_header">Login In</h1>
              <div className="input">
                  <input type="email" id="email2" name="email" value={loginFormData.email} onChange={handleChangeLog} required />
                  <label htmlFor="email2">Enter your email</label>
                  <div className="icon">
                      <ion-icon name="mail-outline" />
                  </div>
              </div>
              <div className="input">
                  <input type={showPassword ? 'text' : 'password'} id="password2" name="password" value={loginFormData.password} onChange={handleChangeLog} required />
                  <label htmlFor="password2">Enter your password</label>
                  <div className="icon">
                      <ion-icon name="shield-outline" />
                  </div>
                  <ion-icon name={showPassword ? 'eye-off-outline' : 'eye-outline'} className="eye eye2" onClick={togglePasswordVisibility}/>
              </div>
              <input type="submit" value="Login In" className="submit loginBtn" />
              <div className="social_media">
                  <p>or login in with other social platforms?</p>
                  <div className="social_apps">
                      <div className="icons">
                          <i className='bx bxl-facebook'></i>
                      </div>
                      <div className="icons">
                          <i className='bx bxl-google'></i>
                      </div>
                      <div className="icons">
                          <i className='bx bxl-linkedin'></i>
                      </div>
                      <div className="icons">
                          <ion-icon name="logo-apple" />
                      </div>
                  </div>
              </div>
              <div className="reset">
                  <p>Forgot your password? <a href="/">Reset your password</a></p>
              </div>
          </form>
      </>
  );
}


export default SignIn;

// sign u[p]

import React, { useState } from 'react';

const apiUrl = process.env.REACT_APP_API_URL;

const SignUp = () => {
    const [showPassword1, setShowPassword1] = useState(false);
    const [showPassword2, setShowPassword2] = useState(false);

    const togglePasswordVisibility1 = () => {
        setShowPassword1(!showPassword1);
    };
    const togglePasswordVisibility2 = () => {
        setShowPassword2(!showPassword2);
    };

    // Sign Up
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        password: '',
    });
    const [confirmedPass, setConfirmedPass] = useState('');

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value
        });
    };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
        const response = await fetch(`${apiUrl}/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('Sign up successful', data);
            localStorage.setItem('userId', data.user.id);
            localStorage.setItem('token', data.token);
            localStorage.setItem('loggedin', true);
            window.location.reload();
            alert('Sign up successful');
        } else {
            // Attempt to read response as text if it's not JSON
            const message = await response.text();
            console.error('Sign up failed', message);
            console.log('API URL:', apiUrl);
            alert('Sign up failed: ' + message);
        }
    } catch ( error ) {
        console.error('Error:', error);
        alert('Sign up error: ' + error.message);
    }
};

    return (
        <>
          
            <form onSubmit={handleSubmit}>
                <h1 className="sign_header">Sign Up</h1>
                <div className="input">
                    <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} required />
                    <label htmlFor="name" className="label">Enter your name</label>
                    <div className="icon">
                        <ion-icon name="person-outline" />
                    </div>
                </div>
                <div className="input">
                    <input type="email" id="email" name="email" value={formData.email} onChange={handleChange} required />
                    <label htmlFor="email">Enter your email</label>
                    <div className="icon">
                        <ion-icon name="mail-outline" />
                    </div>
                </div>
                <div className="input">
                    <input type={showPassword1 ? 'text' : 'password'} id="password" className="passwordField passwordField1" name="password" value={formData.password} onChange={handleChange} required />
                    <label htmlFor="password">Enter your password</label>
                    <div className="icon">
                        <ion-icon name="shield-outline" />
                    </div>
                    <ion-icon name={showPassword1 ? 'eye-off-outline' : 'eye-outline'} className="eye eye1" onClick={togglePasswordVisibility1} />
                </div>
                <div className="input">
                    <input type={showPassword2 ? 'text' : 'password'} id="confirm_password" className="passwordField confirm_password" name="confirm_password" value={confirmedPass} onChange={(e) => setConfirmedPass(e.target.value)} required />
                    <label htmlFor="confirm_password">Confirm your password</label>
                    <div className="icon">
                        <ion-icon name="shield-checkmark-outline" />
                    </div>
                    <ion-icon name={showPassword2 ? 'eye-off-outline' : 'eye-outline'} className="eye confirm_eye1" onClick={togglePasswordVisibility2} />
                </div>
                <input type="submit" value="Sign Up" className="submit signUpButton" />
                <div className="social_media">
                    <p>or sign up with other social platforms?</p>
                    <div className="social_apps">
                        <div className="icons">
                            <i className='bx bxl-facebook'></i>
                        </div>
                        <div className="icons">
                            <i className='bx bxl-google'></i>
                        </div>
                        <div className="icons">
                            <i className='bx bxl-linkedin'></i>
                        </div>
                        <div className="icons">
                            <ion-icon name="logo-apple" />
                        </div>
                    </div>
                </div>
            </form>
        </>
    );
}

export default SignUp;
// fonrm

<section id="form" className="signForm">
            <div className={`form_sec ${ isSignUp? 'sign_up_mod' : 'sign_in_mod'}`}>
                <div className="sign_up">
                    <div className="panel left_panel">
                        <h1>Do you want to join us?</h1>
                        <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Vitae, doloremque! Doloremque doloribus laudantium ducimus natus?</p>
                        <img src={adventure} alt="" />
                        <button id="sigInMod" className="panel_btns" onClick={toggleFormMode}>Sign Up</button>
                    </div>
                    <SignUp/>
                </div>

                <div className="sign_in">
                    <div className="panel right_panel">
                        <h1>Already one of us?</h1>
                        <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Vitae, doloremque! Doloremque doloribus laudantium ducimus natus?</p>
                        <img src={navigator} alt="" />
                        <button id="sigUpMod" className="panel_btns"  onClick={toggleFormMode}>Sign In</button>
                    </div>
                    <SignIn/>
                </div>
            </div>
        </section>